--- a/main.c
+++ b/main.c
@@ -33,134 +33,146 @@ void handler(int sig)
 	stop = 1;
 }
 
-int main(int argc, char *argv[])
-{
-	char *hostname = NULL;
-	int portnr = 80;
-	int c;
-	int timeout = 3;
-	int count = -1, curncount = 0;
-	int wait = 1, quiet = 0;
-	int ok = 0, err = 0;
-	double min = 999999999999999.0, avg = 0.0, max = 0.0;
-	struct hostent  *hostdnsentries;
-
-		while((c = getopt(argc, argv, "p:c:i:t:fq?")) != -1)
-		{
-			switch(c)
-		{
-		case 'p':
-			portnr = atoi(optarg);
-			break;
-
-		case 'c':
-			count = atoi(optarg);
-			break;
-
-		case 'i':
-			wait = atoi(optarg);
-			break;
-
-		case 't':
-			timeout = atoi(optarg);
-			break;
-
-		case 'f':
-			wait = 0;
-			break;
-
-		case 'q':
-			quiet = 1;
-			break;
-
-		case '?':
-		default:
-			usage();
-			return 0;
-		}
-	}
-
-	if (optind >= argc) {
-//		fprintf(stderr, "No hostname given\n");
-		usage();
-		return 3;
-	}
-	hostname = argv[optind];
-
-	hostdnsentries = gethostbyname(hostname);
-	if (hostdnsentries == NULL)
-	{
-		fprintf(stderr, "%s: Name or service not known\n", hostname);
-		return 2;
-	}
-
-	if (!quiet)
-		printf("tcping %s:%d\n", hostname, portnr);
-
-	signal(SIGINT, handler);
-	signal(SIGTERM, handler);
-
-	while((curncount < count || count == -1) && stop == 0)
-	{
-		double ms;
-		double dstart, dend;
-		struct timeval start, end;
-		struct timezone tz;
-		int fd;
-
-		if (gettimeofday(&start, &tz) == -1)
-		{
-			perror("gettimeofday");
-			break;
-		}
-
-		for(;;)
-		{
-			fd = connect_to(hostdnsentries, portnr, timeout);
-			if (fd == -1)
-			{
-				printf("error connecting to host: %s\n", strerror(errno));
-				err++;
-				break;
-			}
-
-			ok++;
-
-			close(fd);
-
-			if (gettimeofday(&end, &tz) == -1)
-			{
-				perror("gettimeofday");
-				break;
-			}
-
-			dstart = (((double)start.tv_sec) + ((double)start.tv_usec)/1000000.0);
-			dend = (((double)end.tv_sec) + ((double)end.tv_usec)/1000000.0);
-			ms = (dend - dstart) * 1000.0;
-			avg += ms;
-			min = min > ms ? ms : min;
-			max = max < ms ? ms : max;
-
-			printf("connected to %s:%d, seq=%d time=%.2f ms\n", hostname, portnr, curncount, (dend - dstart) * 1000.0);
-
-			break;
-		}
-
-		curncount++;
-
-		if (curncount != count)
-			sleep(wait);
-	}
-
-	if (!quiet)
-	{
-		printf("--- %s:%d ping statistics ---\n", hostname, portnr);
-		printf("%d connects, %d ok, %3.2f%% failed\n", curncount, ok, (((double)err) / ((double)count)) * 100.0);
-		printf("round-trip min/avg/max = %.1f/%.1f/%.1f ms\n", min, avg / (double)ok, max);
-	}
-
-	if (ok)
-		return 0;
-	else
-		return 127;
+int main(int argc, char *argv[]) {
+  char *hostname = NULL;
+  int portnr = 80;
+  int c;
+  int timeout = 3;
+  int count = -1, curncount = 0;
+  int wait = 1, quiet = 0;
+  int ok = 0, err = 0;
+  double min = 999999999999999.0, avg = 0.0, max = 0.0;
+  //struct hostent *hostdnsentries;
+
+  int status;
+  struct addrinfo hints, *res;
+  char ipstr[INET6_ADDRSTRLEN];
+
+  while ((c = getopt(argc, argv, "p:c:i:t:fq?")) != -1) {
+    switch (c) {
+    case 'p':
+      portnr = atoi(optarg);
+      break;
+
+    case 'c':
+      count = atoi(optarg);
+      break;
+
+    case 'i':
+      wait = atoi(optarg);
+      break;
+
+    case 't':
+      timeout = atoi(optarg);
+      break;
+
+    case 'f':
+      wait = 0;
+      break;
+
+    case 'q':
+      quiet = 1;
+      break;
+
+    case '?':
+    default:
+      usage();
+      return 0;
+    }
+  }
+
+  if (optind >= argc) {
+    //		fprintf(stderr, "No hostname given\n");
+    usage();
+    return 3;
+  }
+  hostname = argv[optind];
+
+  memset(&hints, 0, sizeof hints);
+  hints.ai_family = AF_UNSPEC; // AF_INET or AF_INET6 to force version
+  hints.ai_socktype = SOCK_STREAM;
+
+  if ((status = getaddrinfo(hostname, NULL, &hints, &res)) != 0 ||
+      res == NULL) {
+    fprintf(stderr, "getaddrinfo: %s=\n", gai_strerror(status));
+    return 1;
+  }
+
+  /*hostdnsentries = gethostbyname(hostname);
+
+  if (hostdnsentries == NULL) {
+    fprintf(stderr, "%s: Name or service not known\n", hostname);
+    return 2;
+  }*/
+
+  if (!quiet)
+    printf("tcping %s:%d\n", hostname, portnr);
+
+  signal(SIGINT, handler);
+  signal(SIGTERM, handler);
+
+  while ((curncount < count || count == -1) && stop == 0) {
+    double ms;
+    double dstart, dend;
+    struct timeval start, end;
+    struct timezone tz;
+    int fd;
+
+    if (gettimeofday(&start, &tz) == -1) {
+      perror("gettimeofday");
+      break;
+    }
+
+    for (;;) {
+      fd = connect_to2(res, portnr, timeout);
+      if (fd == -1) {
+        printf("error connecting to host: %s\n", strerror(errno));
+        err++;
+        break;
+      }
+
+      ok++;
+
+      close(fd);
+
+      if (gettimeofday(&end, &tz) == -1) {
+        perror("gettimeofday");
+        break;
+      }
+
+      dstart = (((double)start.tv_sec) + ((double)start.tv_usec) / 1000000.0);
+      dend = (((double)end.tv_sec) + ((double)end.tv_usec) / 1000000.0);
+      ms = (dend - dstart) * 1000.0;
+      avg += ms;
+      min = min > ms ? ms : min;
+      max = max < ms ? ms : max;
+
+      printf("connected to %s:%d, seq=%d time=%.2f ms\n", hostname, portnr,
+             curncount, (dend - dstart) * 1000.0);
+
+      break;
+    }
+
+    curncount++;
+
+    if (curncount != count)
+      sleep(wait);
+  }
+
+  if (res) {
+    freeaddrinfo(res);
+  }
+
+  if (!quiet) {
+    printf("--- %s:%d ping statistics ---\n", hostname, portnr);
+    printf("%d connects, %d ok, %3.2f%% failed\n", curncount, ok,
+           (((double)err) / ((double)count)) * 100.0);
+    printf("round-trip min/avg/max = %.1f/%.1f/%.1f ms\n", min,
+           avg / (double)ok, max);
+  }
+
+  if (ok)
+    return 0;
+  else
+    return 127;
 }
--- a/tcp.c
+++ b/tcp.c
@@ -1,59 +1,89 @@
-#include <sys/types.h>
-#include <sys/socket.h>
-#include <netinet/in.h>
-#include <netdb.h>
 #include <errno.h>
+#include <fcntl.h>
+#include <netdb.h>
+#include <netinet/in.h>
 #include <stdio.h>
-#include <string.h>
-#include <unistd.h>
 #include <stdlib.h>
+#include <string.h>
+#include <sys/socket.h>
 #include <sys/time.h>
-#include <fcntl.h>
+#include <sys/types.h>
+#include <unistd.h>
 
 #include "tcp.h"
 
-#define incopy(a)       *((struct in_addr *)a)
+#define incopy(a) *((struct in_addr *)a)
 
-int connect_to(struct hostent *host, int portnr, int timeout)
-{
-		int fd;
-		int loop;
-		struct sockaddr_in addr;
-		struct timeval tv;
-
-		/* create socket */
-		fd = socket(AF_INET, SOCK_STREAM, 0);
-		if (fd == -1)
-		{
-				perror("problem creating socket ");
-				exit(2);
-		}
-
-		/* Set Socket Read-Write Timeout */
-		tv.tv_sec = timeout;
-		tv.tv_usec = 0;
-		setsockopt(fd, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
-
-		/* initialize address structure */
-		memset((void *)&addr, 0, sizeof(addr));
-		addr.sin_port   = htons(portnr);
-		addr.sin_family = host -> h_addrtype;
-
-		/* try to connect for each of the entries: */
-		for(loop=0; ; loop++)
-		{
-				if ((host -> h_addr_list[loop]) == NULL)
-						break;
-
-				addr.sin_addr = incopy(host -> h_addr_list[loop]);
-				/* connect to peer */
-				if (connect(fd, (struct sockaddr *)&addr, sizeof(addr)) == 0)
-				{
-						/* connection made, return */
-						return fd;
-				}
-		}
-		close(fd);
-		if (errno = EALREADY) errno = ETIMEDOUT;
-		return -1;
+int connect_to(struct hostent *host, int portnr, int timeout) {
+  int fd;
+  int loop;
+  struct sockaddr_in addr;
+  struct timeval tv;
+
+  /* create socket */
+  fd = socket(AF_INET, SOCK_STREAM, 0);
+  if (fd == -1) {
+    perror("problem creating socket ");
+    exit(2);
+  }
+
+  /* Set Socket Read-Write Timeout */
+  tv.tv_sec = timeout;
+  tv.tv_usec = 0;
+  setsockopt(fd, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
+
+  /* initialize address structure */
+  memset((void *)&addr, 0, sizeof(addr));
+  addr.sin_port = htons(portnr);
+  addr.sin_family = host->h_addrtype;
+
+  /* try to connect for each of the entries: */
+  for (loop = 0;; loop++) {
+    if ((host->h_addr_list[loop]) == NULL)
+      break;
+
+    addr.sin_addr = incopy(host->h_addr_list[loop]);
+    /* connect to peer */
+    if (connect(fd, (struct sockaddr *)&addr, sizeof(addr)) == 0) {
+      /* connection made, return */
+      return fd;
+    }
+  }
+  close(fd);
+  if (errno = EALREADY)
+    errno = ETIMEDOUT;
+  return -1;
 }
+
+int connect_to2(struct addrinfo *addr, int portnr, int timeout) {
+  if (!addr) {
+    return -1;
+  }
+
+  struct addrinfo *p;
+  struct timeval tv;
+  tv.tv_sec = timeout;
+  tv.tv_usec = 0;
+
+  for (p = addr; p != NULL; p = p->ai_next) {
+    int fd = socket(p->ai_family, SOCK_STREAM, 0);
+    if (fd == -1) {
+      continue;
+    }
+
+    setsockopt(fd, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
+
+    // Set the port number in the address structure
+    if (p->ai_family == AF_INET) {
+      ((struct sockaddr_in *)p->ai_addr)->sin_port = htons(portnr);
+    } else if (p->ai_family == AF_INET6) {
+      ((struct sockaddr_in6 *)p->ai_addr)->sin6_port = htons(portnr);
+    }
+
+    if (connect(fd, p->ai_addr, p->ai_addrlen) == 0) {
+      return fd;
+    }
+    close(fd);
+  }
+  return -1;
+}
\ No newline at end of file
--- a/tcp.h
+++ b/tcp.h
@@ -1 +1,3 @@
 int connect_to(struct hostent *host, int portnr, int timeout);
+
+int connect_to2(struct addrinfo *addr, int portnr, int timeout);
\ No newline at end of file
